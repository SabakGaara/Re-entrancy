function select_sample(value){
    var selectedOption=value.options[value.selectedIndex];
    if(selectedOption.value=="BecToken"){
        document.getElementById("solidity_name").value="BecToken";
        document.getElementById("solidity").value="pragma solidity ^0.4.16;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value > 0 && _value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value > 0 && _value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\n\r\n/**\r\n * @title Pausable token\r\n *\r\n * @dev StandardToken modified with pausable transfers.\r\n **/\r\n\r\ncontract PausableToken is StandardToken, Pausable {\r\n\r\n  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\r\n    return super.approve(_spender, _value);\r\n  }\r\n  \r\n  function batchTransfer(address[] _receivers, uint256 _value) public whenNotPaused returns (bool) {\r\n    uint cnt = _receivers.length;\r\n    uint256 amount = uint256(cnt) * _value;\r\n    require(cnt > 0 && cnt <= 20);\r\n    require(_value > 0 && balances[msg.sender] >= amount);\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(amount);\r\n    for (uint i = 0; i < cnt; i++) {\r\n        balances[_receivers[i]] = balances[_receivers[i]].add(_value);\r\n        Transfer(msg.sender, _receivers[i], _value);\r\n    }\r\n    return true;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Bec Token\r\n *\r\n * @dev Implementation of Bec Token based on the basic standard token.\r\n */\r\ncontract BecToken is PausableToken {\r\n    /**\r\n    * Public variables of the token\r\n    * The following variables are OPTIONAL vanities. One does not have to include them.\r\n    * They allow one to customise the token contract & in no way influences the core functionality.\r\n    * Some wallets/interfaces might not even bother to look at this information.\r\n    */\r\n    string public name = \"BeautyChain\";\r\n    string public symbol = \"BEC\";\r\n    string public version = '1.0.0';\r\n    uint8 public decimals = 18;\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     */\r\n    function BecToken() {\r\n      totalSupply = 7000000000 * (10**(uint256(decimals)));\r\n      balances[msg.sender] = totalSupply;    // Give the creator all initial tokens\r\n    }\r\n\r\n    function () {\r\n        //if ether is sent to this address, send it back.\r\n        revert();\r\n    }\r\n}";
        document.getElementById("solidity_input").value="83f12fec000000000000000000000000000000000000000000000000000000000000004080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000b4d30cac5124b46c2df0cf3e3e1be05f421190330000000000000000000000000e823ffe018727585eaf5bc769fa80472f76c3d7";
        document.getElementById("bytecode").value="6080604052600436106100e6576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100f8578063095ea7b31461018857806318160ddd146101ed57806323b872dd14610218578063313ce5671461029d5780633f4ba83a146102ce57806354fd4d50146102e55780635c975abb1461037557806370a08231146103a457806383f12fec146103fb5780638456cb59146104835780638da5cb5b1461049a57806395d89b41146104f1578063a9059cbb14610581578063dd62ed3e146105e6578063f2fde38b1461065d575b3480156100f257600080fd5b50600080fd5b34801561010457600080fd5b5061010d6106a0565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561014d578082015181840152602081019050610132565b50505050905090810190601f16801561017a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561019457600080fd5b506101d3600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061073e565b604051808215151515815260200191505060405180910390f35b3480156101f957600080fd5b5061020261076e565b6040518082815260200191505060405180910390f35b34801561022457600080fd5b50610283600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610774565b604051808215151515815260200191505060405180910390f35b3480156102a957600080fd5b506102b26107a6565b604051808260ff1660ff16815260200191505060405180910390f35b3480156102da57600080fd5b506102e36107b9565b005b3480156102f157600080fd5b506102fa610879565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561033a57808201518184015260208101905061031f565b50505050905090810190601f1680156103675780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561038157600080fd5b5061038a610917565b604051808215151515815260200191505060405180910390f35b3480156103b057600080fd5b506103e5600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061092a565b6040518082815260200191505060405180910390f35b34801561040757600080fd5b506104696004803603810190808035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919291929080359060200190929190505050610973565b604051808215151515815260200191505060405180910390f35b34801561048f57600080fd5b50610498610c0f565b005b3480156104a657600080fd5b506104af610cd0565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156104fd57600080fd5b50610506610cf6565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561054657808201518184015260208101905061052b565b50505050905090810190601f1680156105735780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561058d57600080fd5b506105cc600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610d94565b604051808215151515815260200191505060405180910390f35b3480156105f257600080fd5b50610647600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610dc4565b6040518082815260200191505060405180910390f35b34801561066957600080fd5b5061069e600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610e4b565b005b60048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107365780601f1061070b57610100808354040283529160200191610736565b820191906000526020600020905b81548152906001019060200180831161071957829003601f168201915b505050505081565b6000600360149054906101000a900460ff1615151561075c57600080fd5b6107668383610fa3565b905092915050565b60005481565b6000600360149054906101000a900460ff1615151561079257600080fd5b61079d848484611095565b90509392505050565b600760009054906101000a900460ff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561081557600080fd5b600360149054906101000a900460ff16151561083057600080fd5b6000600360146101000a81548160ff0219169083151502179055507f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a1565b60068054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561090f5780601f106108e45761010080835404028352916020019161090f565b820191906000526020600020905b8154815290600101906020018083116108f257829003601f168201915b505050505081565b600360149054906101000a900460ff1681565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600080600080600360149054906101000a900460ff1615151561099557600080fd5b8551925084830291506000831180156109af575060148311155b15156109ba57600080fd5b600085118015610a09575081600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b1515610a1457600080fd5b610a6682600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461146090919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600090505b82811015610c0257610b1f85600160008985815181101515610acc57fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461147990919063ffffffff16565b600160008884815181101515610b3157fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508581815181101515610b8757fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef876040518082815260200191505060405180910390a38080600101915050610aae565b6001935050505092915050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610c6b57600080fd5b600360149054906101000a900460ff16151515610c8757600080fd5b6001600360146101000a81548160ff0219169083151502179055507f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a1565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60058054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610d8c5780601f10610d6157610100808354040283529160200191610d8c565b820191906000526020600020905b815481529060010190602001808311610d6f57829003601f168201915b505050505081565b6000600360149054906101000a900460ff16151515610db257600080fd5b610dbc8383611497565b905092915050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610ea757600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610ee357600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156110d257600080fd5b6000821180156111215750600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211155b151561112c57600080fd5b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111515156111b757600080fd5b61120982600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461146090919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061129e82600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461147990919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061137082600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461146090919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b600082821115151561146e57fe5b818303905092915050565b600080828401905083811015151561148d57fe5b8091505092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141515156114d457600080fd5b6000821180156115235750600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211155b151561152e57600080fd5b61158082600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461146090919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061161582600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461147990919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a360019050929150505600a165627a7a72305820691c902cefb70d3045f683a32351a4cf4cbaeb041d1710d7a47317450d1ec3e50029";
        document.getElementById("bytecode_input").value="83f12fec000000000000000000000000000000000000000000000000000000000000004080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000b4d30cac5124b46c2df0cf3e3e1be05f421190330000000000000000000000000e823ffe018727585eaf5bc769fa80472f76c3d7";
    }else if(selectedOption.value=="SMT"){
        document.getElementById("solidity_name").value="SMT";
        document.getElementById("solidity").value="// Abstract contract for the full ERC 20 Token standard\r\n// https://github.com/ethereum/EIPs/issues/20\r\npragma solidity ^0.4.15;\r\n\r\ncontract Token {\r\n    /* This is a slight change to the ERC20 base standard.*/\r\n    /// total amount of tokens\r\n    uint256 public totalSupply;\r\n\r\n    /// @param _owner The address from which the balance will be retrieved\r\n    /// @return The balance\r\n    function balanceOf(address _owner) public constant returns (uint256 balance);\r\n\r\n    /// @notice send `_value` token to `_to` from `msg.sender`\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n\r\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\r\n    /// @param _from The address of the sender\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n\r\n    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @param _value The amount of tokens to be approved for transfer\r\n    /// @return Whether the approval was successful or not\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n\r\n    /// @param _owner The address of the account owning tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @return Amount of remaining tokens allowed to spent\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\ncontract Owned {\r\n\r\n    /// `owner` is the only address that can call a function with this\r\n    /// modifier\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    address public owner;\r\n\r\n    /// @notice The Constructor assigns the message sender to be `owner`\r\n    function Owned() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    address newOwner=0x0;\r\n\r\n    event OwnerUpdate(address _prevOwner, address _newOwner);\r\n\r\n    ///change the owner\r\n    function changeOwner(address _newOwner) public onlyOwner {\r\n        require(_newOwner != owner);\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    /// accept the ownership\r\n    function acceptOwnership() public{\r\n        require(msg.sender == newOwner);\r\n        OwnerUpdate(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = 0x0;\r\n    }\r\n}\r\n\r\ncontract Controlled is Owned{\r\n\r\n    function Controlled() public {\r\n       setExclude(msg.sender);\r\n    }\r\n\r\n    // Flag that determines if the token is transferable or not.\r\n    bool public transferEnabled = false;\r\n\r\n    // flag that makes locked address effect\r\n    bool lockFlag=true;\r\n    mapping(address => bool) locked;\r\n    mapping(address => bool) exclude;\r\n\r\n    function enableTransfer(bool _enable) public onlyOwner{\r\n        transferEnabled=_enable;\r\n    }\r\n\r\n    function disableLock(bool _enable) public onlyOwner returns (bool success){\r\n        lockFlag=_enable;\r\n        return true;\r\n    }\r\n\r\n    function addLock(address _addr) public onlyOwner returns (bool success){\r\n        require(_addr!=msg.sender);\r\n        locked[_addr]=true;\r\n        return true;\r\n    }\r\n\r\n    function setExclude(address _addr) public onlyOwner returns (bool success){\r\n        exclude[_addr]=true;\r\n        return true;\r\n    }\r\n\r\n    function removeLock(address _addr) public onlyOwner returns (bool success){\r\n        locked[_addr]=false;\r\n        return true;\r\n    }\r\n\r\n    modifier transferAllowed(address _addr) {\r\n        if (!exclude[_addr]) {\r\n            assert(transferEnabled);\r\n            if(lockFlag){\r\n                assert(!locked[_addr]);\r\n            }\r\n        }\r\n        \r\n        _;\r\n    }\r\n\r\n}\r\n\r\ncontract StandardToken is Token,Controlled {\r\n\r\n    function transfer(address _to, uint256 _value) public transferAllowed(msg.sender) returns (bool success) {\r\n        //Default assumes totalSupply can't be over max (2^256 - 1).\r\n        //If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn't wrap.\r\n        //Replace the if with this one instead.\r\n        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n            balances[msg.sender] -= _value;\r\n            balances[_to] += _value;\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        } else { return false; }\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public transferAllowed(_from) returns (bool success) {\r\n        //same as above. Replace this line with the following if you want to protect against wrapping uints.\r\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n            balances[_to] += _value;\r\n            balances[_from] -= _value;\r\n            allowed[_from][msg.sender] -= _value;\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        } else { return false; }\r\n    }\r\n\r\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n      return allowed[_owner][_spender];\r\n    }\r\n\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n}\r\n\r\ncontract SMT is StandardToken {\r\n\r\n    function () public {\r\n        revert();\r\n    }\r\n\r\n    string public name = \"SmartMesh Token\";                   //fancy name\r\n    uint8 public decimals = 18;                //How many decimals to show. ie. There could 1000 base units with 3 decimals. Meaning 0.980 SBX = 980 base units. It's like comparing 1 wei to 1 ether.\r\n    string public symbol = \"SMT\";                 //An identifier\r\n    string public version = 'v0.1';       //SMT 0.1 standard. Just an arbitrary versioning scheme.\r\n    uint256 public allocateEndTime;\r\n\r\n    \r\n    // The nonce for avoid transfer replay attacks\r\n    mapping(address => uint256) nonces;\r\n\r\n    function SMT() public {\r\n        allocateEndTime = now + 1 days;\r\n    }\r\n\r\n    /*\r\n     * Proxy transfer SmartMesh token. When some users of the ethereum account has no ether,\r\n     * he or she can authorize the agent for broadcast transactions, and agents may charge agency fees\r\n     * @param _from\r\n     * @param _to\r\n     * @param _value\r\n     * @param feeSmt\r\n     * @param _v\r\n     * @param _r\r\n     * @param _s\r\n     */\r\n    function transferProxy(address _from, address _to, uint256 _value, uint256 _feeSmt,\r\n        uint8 _v,bytes32 _r, bytes32 _s) public returns (bool){\r\n\r\n        if(balances[_from] < _feeSmt + _value) revert();\r\n\r\n        uint256 nonce = nonces[_from];\r\n        bytes32 h = keccak256(_from,_to,_value,_feeSmt,nonce);\r\n        if(_from != ecrecover(h,_v,_r,_s)) revert();\r\n\r\n        if(balances[_to] + _value < balances[_to]\r\n            || balances[msg.sender] + _feeSmt < balances[msg.sender]) revert();\r\n        balances[_to] += _value;\r\n        Transfer(_from, _to, _value);\r\n\r\n        balances[msg.sender] += _feeSmt;\r\n        Transfer(_from, msg.sender, _feeSmt);\r\n\r\n        balances[_from] -= _value + _feeSmt;\r\n        nonces[_from] = nonce + 1;\r\n        return true;\r\n    }\r\n\r\n    /*\r\n     * Proxy approve that some one can authorize the agent for broadcast transaction\r\n     * which call approve method, and agents may charge agency fees\r\n     * @param _from The address which should tranfer SMT to others\r\n     * @param _spender The spender who allowed by _from\r\n     * @param _value The value that should be tranfered.\r\n     * @param _v\r\n     * @param _r\r\n     * @param _s\r\n     */\r\n    function approveProxy(address _from, address _spender, uint256 _value,\r\n        uint8 _v,bytes32 _r, bytes32 _s) public returns (bool success) {\r\n\r\n        uint256 nonce = nonces[_from];\r\n        bytes32 hash = keccak256(_from,_spender,_value,nonce);\r\n        if(_from != ecrecover(hash,_v,_r,_s)) revert();\r\n        allowed[_from][_spender] = _value;\r\n        Approval(_from, _spender, _value);\r\n        nonces[_from] = nonce + 1;\r\n        return true;\r\n    }\r\n\r\n\r\n    /*\r\n     * Get the nonce\r\n     * @param _addr\r\n     */\r\n    function getNonce(address _addr) public constant returns (uint256){\r\n        return nonces[_addr];\r\n    }\r\n\r\n    /* Approves and then calls the receiving contract */\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n\r\n        //call the receiveApproval function on the contract you want to be notified. This crafts the function signature manually so one doesn't have to include a contract in here just for this.\r\n        //receiveApproval(address _from, uint256 _value, address _tokenContract, bytes _extraData)\r\n        //it is assumed that when does this that the call *should* succeed, otherwise one would use vanilla approve instead.\r\n        if(!_spender.call(bytes4(bytes32(keccak256(\"receiveApproval(address,uint256,address,bytes)\"))), msg.sender, _value, this, _extraData)) { revert(); }\r\n        return true;\r\n    }\r\n\r\n    /* Approves and then calls the contract code*/\r\n    function approveAndCallcode(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n\r\n        //Call the contract code\r\n        if(!_spender.call(_extraData)) { revert(); }\r\n        return true;\r\n    }\r\n\r\n    // Allocate tokens to the users\r\n    // @param _owners The owners list of the token\r\n    // @param _values The value list of the token\r\n    function allocateTokens(address[] _owners, uint256[] _values) public onlyOwner {\r\n\r\n        if(allocateEndTime < now) revert();\r\n        if(_owners.length != _values.length) revert();\r\n\r\n        for(uint256 i = 0; i < _owners.length ; i++){\r\n            address to = _owners[i];\r\n            uint256 value = _values[i];\r\n            if(totalSupply + value <= totalSupply || balances[to] + value <= balances[to]) revert();\r\n            totalSupply += value;\r\n            balances[to] += value;\r\n        }\r\n    }\r\n}";
        document.getElementById("solidity_input").value="eb502d45000000000000000000000000df31a499a5a8358b74564f1e2214b31bb34eb46f000000000000000000000000df31a499a5a8358b74564f1e2214b31bb34eb46f8fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000001b87790587c256045860b8fe624e5807a658424fad18c2348460e40ecf10fc87996c879b1e8a0a62f23b47aa57a3369d416dd783966bd1dda0394c04163a98d8d8";
        document.getElementById("bytecode").value="608060405260043610610154576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde0314610166578063095ea7b3146101f657806318160ddd1461025b57806323b872dd146102865780632d0335ab1461030b578063313ce567146103625780634a387bef146103935780634cd412d5146103ee57806354fd4d501461041d5780635f6f8b5f146104ad57806370a082311461050857806379ba50971461055f5780637f5dfd1614610576578063882f327b146106245780638da5cb5b1461067f57806391c71e2b146106d657806395d89b411461071d578063a6f9dae1146107ad578063a7368afb146107f0578063a9059cbb14610899578063b11c4fd8146108fe578063c750c3b1146109a9578063cae9ca51146109d4578063dd62ed3e14610a7f578063eb502d4514610af6578063ef7ac0e514610bae575b34801561016057600080fd5b50600080fd5b34801561017257600080fd5b5061017b610bdd565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101bb5780820151818401526020810190506101a0565b50505050905090810190601f1680156101e85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561020257600080fd5b50610241600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610c7b565b604051808215151515815260200191505060405180910390f35b34801561026757600080fd5b50610270610d6d565b6040518082815260200191505060405180910390f35b34801561029257600080fd5b506102f1600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610d73565b604051808215151515815260200191505060405180910390f35b34801561031757600080fd5b5061034c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611148565b6040518082815260200191505060405180910390f35b34801561036e57600080fd5b50610377611191565b604051808260ff1660ff16815260200191505060405180910390f35b34801561039f57600080fd5b506103d4600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506111a4565b604051808215151515815260200191505060405180910390f35b3480156103fa57600080fd5b50610403611263565b604051808215151515815260200191505060405180910390f35b34801561042957600080fd5b50610432611276565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610472578082015181840152602081019050610457565b50505050905090810190601f16801561049f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156104b957600080fd5b506104ee600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611314565b604051808215151515815260200191505060405180910390f35b34801561051457600080fd5b50610549600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506113d3565b6040518082815260200191505060405180910390f35b34801561056b57600080fd5b5061057461141c565b005b34801561058257600080fd5b5061060a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803560ff169060200190929190803560001916906020019092919080356000191690602001909291905050506115fa565b604051808215151515815260200191505060405180910390f35b34801561063057600080fd5b50610665600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506118de565b604051808215151515815260200191505060405180910390f35b34801561068b57600080fd5b506106946119d8565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156106e257600080fd5b506107036004803603810190808035151590602001909291905050506119fe565b604051808215151515815260200191505060405180910390f35b34801561072957600080fd5b50610732611a7f565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610772578082015181840152602081019050610757565b50505050905090810190601f16801561079f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156107b957600080fd5b506107ee600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611b1d565b005b3480156107fc57600080fd5b506108976004803603810190808035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919291929080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290505050611c1a565b005b3480156108a557600080fd5b506108e4600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611deb565b604051808215151515815260200191505060405180910390f35b34801561090a57600080fd5b5061098f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506120ad565b604051808215151515815260200191505060405180910390f35b3480156109b557600080fd5b506109be612232565b6040518082815260200191505060405180910390f35b3480156109e057600080fd5b50610a65600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050612238565b604051808215151515815260200191505060405180910390f35b348015610a8b57600080fd5b50610ae0600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506124d5565b6040518082815260200191505060405180910390f35b348015610b0257600080fd5b50610b94600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190803560ff1690602001909291908035600019169060200190929190803560001916906020019092919050505061255c565b604051808215151515815260200191505060405180910390f35b348015610bba57600080fd5b50610bdb600480360381019080803515159060200190929190505050612a7b565b005b60078054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610c735780601f10610c4857610100808354040283529160200191610c73565b820191906000526020600020905b815481529060010190602001808311610c5657829003601f168201915b505050505081565b600081600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60005481565b600083600460008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515610e4e57600260149054906101000a900460ff161515610de157fe5b600260159054906101000a900460ff1615610e4d57600360008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151515610e4c57fe5b5b5b82600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410158015610f19575082600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b8015610fa45750600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401115b1561113b5782600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555082600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555082600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a360019150611140565b600091505b509392505050565b6000600c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600860009054906101000a900460ff1681565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561120257600080fd5b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060019050919050565b600260149054906101000a900460ff1681565b600a8054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561130c5780601f106112e15761010080835404028352916020019161130c565b820191906000526020600020905b8154815290600101906020018083116112ef57829003601f168201915b505050505081565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561137257600080fd5b6001600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060019050919050565b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561147857600080fd5b7f343765429aea5a34b3ff6a3785a98a5abb2597aca87bfbb58632c173d585373a600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a1600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000806000600c60008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054915088888884604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c0100000000000000000000000002815260140183815260200182815260200194505050505060405180910390209050600181878787604051600081526020016040526040518085600019166000191681526020018460ff1660ff1681526020018360001916600019168152602001826000191660001916815260200194505050505060206040516020810390808403906000865af115801561175e573d6000803e3d6000fd5b5050506020604051035173ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff161415156117a157600080fd5b86600660008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508773ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925896040518082815260200191505060405180910390a360018201600c60008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506001925050509695505050505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561193c57600080fd5b3373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561197757600080fd5b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060019050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611a5c57600080fd5b81600260156101000a81548160ff02191690831515021790555060019050919050565b60098054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611b155780601f10611aea57610100808354040283529160200191611b15565b820191906000526020600020905b815481529060010190602001808311611af857829003601f168201915b505050505081565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611b7957600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515611bd657600080fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000806000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611c7b57600080fd5b42600b541015611c8a57600080fd5b83518551141515611c9a57600080fd5b600092505b8451831015611de4578483815181101515611cb657fe5b9060200190602002015191508383815181101515611cd057fe5b9060200190602002015190506000548160005401111580611d715750600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540111155b15611d7b57600080fd5b80600080828254019250508190555080600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508280600101935050611c9f565b5050505050565b600033600460008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515611ec657600260149054906101000a900460ff161515611e5957fe5b600260159054906101000a900460ff1615611ec557600360008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151515611ec457fe5b5b5b82600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410158015611f945750600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401115b156120a15782600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555082600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a3600191506120a6565b600091505b5092915050565b600082600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925856040518082815260200191505060405180910390a38373ffffffffffffffffffffffffffffffffffffffff168260405180828051906020019080838360005b838110156121da5780820151818401526020810190506121bf565b50505050905090810190601f1680156122075780820380516001836020036101000a031916815260200191505b509150506000604051808303816000865af1915050151561222757600080fd5b600190509392505050565b600b5481565b600082600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925856040518082815260200191505060405180910390a38373ffffffffffffffffffffffffffffffffffffffff1660405180807f72656365697665417070726f76616c28616464726573732c75696e743235362c81526020017f616464726573732c627974657329000000000000000000000000000000000000815250602e01905060405180910390207c01000000000000000000000000000000000000000000000000000000009004338530866040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828051906020019080838360005b8381101561247957808201518184015260208101905061245e565b50505050905090810190601f1680156124a65780820380516001836020036101000a031916815260200191505b509450505050506000604051808303816000875af19250505015156124ca57600080fd5b600190509392505050565b6000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000806000878701600560008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156125af57600080fd5b600c60008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205491508989898985604051808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014018481526020018381526020018281526020019550505050505060405180910390209050600181878787604051600081526020016040526040518085600019166000191681526020018460ff1660ff1681526020018360001916600019168152602001826000191660001916815260200194505050505060206040516020810390808403906000865af1158015612716573d6000803e3d6000fd5b5050506020604051035173ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff1614151561275957600080fd5b600560008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205488600560008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540110806128665750600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205487600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401105b1561287057600080fd5b87600560008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508873ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8a6040518082815260200191505060405180910390a386600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055503373ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef896040518082815260200191505060405180910390a3868801600560008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555060018201600c60008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600192505050979650505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612ad757600080fd5b80600260146101000a81548160ff021916908315150217905550505600a165627a7a7230582094a64c4ad83a8a7715c66dc0fc6c7402d0272d5f27cf6fa9452cbb50973856f10029";
        document.getElementById("bytecode_input").value="eb502d45000000000000000000000000df31a499a5a8358b74564f1e2214b31bb34eb46f000000000000000000000000df31a499a5a8358b74564f1e2214b31bb34eb46f8fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000001b87790587c256045860b8fe624e5807a658424fad18c2348460e40ecf10fc87996c879b1e8a0a62f23b47aa57a3369d416dd783966bd1dda0394c04163a98d8d8";
    }else if(selectedOption.value=="Lizun"){
        document.getElementById("solidity_name").value="Lizun";
        document.getElementById("solidity").value="// $LizunToken\r\n\r\npragma solidity ^0.4.4;\r\n\r\n\r\ncontract Token {\r\n\r\n    function totalSupply() constant returns (uint256 supply) {}\r\n\r\n\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {}\r\n\r\n    function transfer(address _to, uint256 _value) returns (bool success) {}\r\n\r\n \r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\r\n\r\n    function approve(address _spender, uint256 _value) returns (bool success) {}\r\n\r\n   \r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n}\r\n\r\ncontract StandardToken is Token {\r\n\r\n    function transfer(address _to, uint256 _value) returns (bool success) {\r\n        uint256 balances_from = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\r\n        uint256 balances_to = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\r\n        if (balances_from >= _value && balances_to + _value > balances_to) {\r\n            balances_from -= _value;\r\n            balances_to += _value;\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        } else {return false;}\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n\r\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n            balances[_to] += _value;\r\n            balances[_from] -= _value;\r\n            allowed[_from][msg.sender] -= _value;\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        } else {return false;}\r\n    }\r\n\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n      return allowed[_owner][_spender];\r\n    }\r\n\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n    uint256 public totalSupply;\r\n}\r\n\r\ncontract Lizun is StandardToken { \r\n\r\n\r\n    string public name;                \r\n    uint8 public decimals;           \r\n    string public symbol;                \r\n    string public version = \"1.0\"; \r\n    uint256 public unitsOneEthCanBuy;    \r\n    uint256 public totalEthInWei;         \r\n    address public fundsWallet;           \r\n\r\n \r\n    function Lizun() {\r\n        balances[msg.sender] = 1000000000000000000000000000;               \r\n        totalSupply = 1000000000000000000000000000;                        \r\n        name = \"Lizun\";                                              \r\n        decimals = 18;                                               \r\n        symbol = \"LIZUN\";                                            \r\n                                            \r\n        fundsWallet = msg.sender;                                   \r\n                          \r\n    }\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n\r\n        if (!_spender.call(bytes4(bytes32(sha3(\"receiveApproval(address,uint256,address,bytes)\"))), msg.sender, _value, this, _extraData)) {throw;}\r\n        return true;\r\n    }\r\n}";
        document.getElementById("solidity_input").value="a9059cbb00000000000000000000000078d5eb5057972aba6fe9fc3dff4335b4209a874c0000000000000000000000000000000000000000000000000000000000000001";
        document.getElementById("bytecode").value="6080604052600436106100d0576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100d5578063095ea7b31461016557806318160ddd146101ca5780632194f3a2146101f557806323b872dd1461024c578063313ce567146102d157806354fd4d501461030257806365f2bc2e1461039257806370a08231146103bd578063933ba4131461041457806395d89b411461043f578063a9059cbb146104cf578063cae9ca5114610534578063dd62ed3e146105df575b600080fd5b3480156100e157600080fd5b506100ea610656565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561012a57808201518184015260208101905061010f565b50505050905090810190601f1680156101575780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561017157600080fd5b506101b0600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506106f4565b604051808215151515815260200191505060405180910390f35b3480156101d657600080fd5b506101df6107e6565b6040518082815260200191505060405180910390f35b34801561020157600080fd5b5061020a6107ec565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561025857600080fd5b506102b7600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610812565b604051808215151515815260200191505060405180910390f35b3480156102dd57600080fd5b506102e6610b08565b604051808260ff1660ff16815260200191505060405180910390f35b34801561030e57600080fd5b50610317610b1b565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561035757808201518184015260208101905061033c565b50505050905090810190601f1680156103845780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561039e57600080fd5b506103a7610bb9565b6040518082815260200191505060405180910390f35b3480156103c957600080fd5b506103fe600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610bbf565b6040518082815260200191505060405180910390f35b34801561042057600080fd5b50610429610c07565b6040518082815260200191505060405180910390f35b34801561044b57600080fd5b50610454610c0d565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610494578082015181840152602081019050610479565b50505050905090810190601f1680156104c15780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156104db57600080fd5b5061051a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610cab565b604051808215151515815260200191505060405180910390f35b34801561054057600080fd5b506105c5600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610d91565b604051808215151515815260200191505060405180910390f35b3480156105eb57600080fd5b50610640600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061102e565b6040518082815260200191505060405180910390f35b60038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106ec5780601f106106c1576101008083540402835291602001916106ec565b820191906000526020600020905b8154815290600101906020018083116106cf57829003601f168201915b505050505081565b600081600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60025481565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000816000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101580156108de575081600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b801561096757506000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401115b15610afc57816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a360019050610b01565b600090505b9392505050565b600460009054906101000a900460ff1681565b60068054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610bb15780601f10610b8657610100808354040283529160200191610bb1565b820191906000526020600020905b815481529060010190602001808311610b9457829003601f168201915b505050505081565b60075481565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60085481565b60058054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610ca35780601f10610c7857610100808354040283529160200191610ca3565b820191906000526020600020905b815481529060010190602001808311610c8657829003601f168201915b505050505081565b60008060007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9050838210158015610d07575080848201115b15610d8457838203915083810190508473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040518082815260200191505060405180910390a360019250610d89565b600092505b505092915050565b600082600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925856040518082815260200191505060405180910390a38373ffffffffffffffffffffffffffffffffffffffff1660405180807f72656365697665417070726f76616c28616464726573732c75696e743235362c81526020017f616464726573732c627974657329000000000000000000000000000000000000815250602e01905060405180910390207c01000000000000000000000000000000000000000000000000000000009004338530866040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828051906020019080838360005b83811015610fd2578082015181840152602081019050610fb7565b50505050905090810190601f168015610fff5780820380516001836020036101000a031916815260200191505b509450505050506000604051808303816000875af192505050151561102357600080fd5b600190509392505050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050929150505600a165627a7a7230582017c21846e5c4d0ddcff6942bc8ad1b3044a8fab928a570cdace6910ed81b6f890029";
        document.getElementById("bytecode_input").value="a9059cbb00000000000000000000000078d5eb5057972aba6fe9fc3dff4335b4209a874c0000000000000000000000000000000000000000000000000000000000000001";
    }else if(selectedOption.value=="darx"){
        document.getElementById("solidity_name").value="darx";
        document.getElementById("solidity").value="pragma solidity ^0.4.19;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n */\r\ncontract ERC20 {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract StandardToken is ERC20 {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n  /**\r\n   * @dev Gets the balance of the specified address.\r\n   * @param _owner The address to query the the balance of.\r\n   * @return An uint256 representing the amount owned by the passed address.\r\n   */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n  /**\r\n   * @dev transfer token for a specified address\r\n   * @param _to The address to transfer to.\r\n   * @param _value The amount to be transferred.\r\n   */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    \r\n    uint256 balances_from = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\r\n    uint256 balances_to = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances_from = balances_from.sub(_value);\r\n    balances_to = balances_to.add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    var _allowance = allowed[_from][msg.sender];\r\n    require(_to != address(0));\r\n    require (_value <= _allowance);\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    // To change the approve amount you first have to reduce the addresses`\r\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n}\r\n\r\ncontract darx is StandardToken {\r\n  string public constant name = \"darx\";\r\n  string public constant symbol = \"DAR\";\r\n  uint8 public constant decimals = 6;\r\n\r\n  function darx() public {\r\n    totalSupply = 1000000000000000000;\r\n    balances[msg.sender] = totalSupply;\r\n  }\r\n}";
        document.getElementById("solidity_input").value="a9059cbb0000000000000000000000006636B6e6CC15aF958bED6E935359763EB0e1e0f30000000000000000000000000000000000000000000000000000000000000001";
        document.getElementById("bytecode").value="608060405260043610610099576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde031461009e578063095ea7b31461012e57806318160ddd1461019357806323b872dd146101be578063313ce5671461024357806370a082311461027457806395d89b41146102cb578063a9059cbb1461035b578063dd62ed3e146103c0575b600080fd5b3480156100aa57600080fd5b506100b3610437565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100f35780820151818401526020810190506100d8565b50505050905090810190601f1680156101205780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561013a57600080fd5b50610179600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610470565b604051808215151515815260200191505060405180910390f35b34801561019f57600080fd5b506101a86105f7565b6040518082815260200191505060405180910390f35b3480156101ca57600080fd5b50610229600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506105fd565b604051808215151515815260200191505060405180910390f35b34801561024f57600080fd5b506102586108f8565b604051808260ff1660ff16815260200191505060405180910390f35b34801561028057600080fd5b506102b5600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506108fd565b6040518082815260200191505060405180910390f35b3480156102d757600080fd5b506102e0610946565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610320578082015181840152602081019050610305565b50505050905090810190601f16801561034d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561036757600080fd5b506103a6600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061097f565b604051808215151515815260200191505060405180910390f35b3480156103cc57600080fd5b50610421600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610aa0565b6040518082815260200191505060405180910390f35b6040805190810160405280600481526020017f646172780000000000000000000000000000000000000000000000000000000081525081565b6000808214806104fc57506000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054145b151561050757600080fd5b81600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60005481565b600080600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141515156106bb57600080fd5b8083111515156106ca57600080fd5b61071c83600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610b2790919063ffffffff16565b600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506107b183600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610b4090919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506108078382610b2790919063ffffffff16565b600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a360019150509392505050565b600681565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6040805190810160405280600381526020017f444152000000000000000000000000000000000000000000000000000000000081525081565b60008060008073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16141515156109bf57600080fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9050610a188483610b2790919063ffffffff16565b9150610a2d8482610b4090919063ffffffff16565b90508473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040518082815260200191505060405180910390a360019250505092915050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000828211151515610b3557fe5b818303905092915050565b6000808284019050838110151515610b5457fe5b80915050929150505600a165627a7a72305820d9fcadd02c4fcb90d4e812b34b8dadf46d0692a7fe2e406be749f2f478054b820029";
        document.getElementById("bytecode_input").value="a9059cbb0000000000000000000000006636B6e6CC15aF958bED6E935359763EB0e1e0f30000000000000000000000000000000000000000000000000000000000000001";
    }else if(selectedOption.value=="GIFT_CARD"){
        document.getElementById("solidity_name").value="GIFT_CARD";
        document.getElementById("solidity").value="pragma solidity ^0.4.19;\r\n\r\ncontract GIFT_CARD\r\n{\r\n    function Put(bytes32 _hash, uint _unlockTime)\r\n    public\r\n    payable\r\n    {\r\n        if(this.balance==0 || msg.value > 1000000000000000000)// 0.1 ETH\r\n        {\r\n            unlockTime = now+_unlockTime;\r\n            hashPass = _hash;\r\n        }\r\n    }\r\n    \r\n    function Take(bytes _pass)\r\n    external\r\n    payable\r\n    {\r\n        if(hashPass == keccak256(_pass) && now>unlockTime && msg.sender==tx.origin)\r\n        {\r\n            msg.sender.transfer(this.balance);\r\n        }\r\n    }\r\n    \r\n    bytes32 public hashPass;\r\n    uint public unlockTime;\r\n    \r\n    function GetHash(bytes pass) public constant returns (bytes32) {return keccak256(pass);}\r\n    \r\n    function() public payable{}\r\n}";
        document.getElementById("solidity_input").value="166eb4cbc20539e9ebb1a6bba4f700fe77235c52748a4d52078ed425c1d42928a06414e40000000000000000000000000000000000000000000000000000000000000000";
        document.getElementById("bytecode").value="60606040526004361061006c5763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663166eb4cb811461006e578063251c1aa31461007c57806381777b78146100a157806387f24484146100b4578063b456ecc5146100c7575b005b61006c600435602435610118565b341561008757600080fd5b61008f610158565b60405190815260200160405180910390f35b61006c600480356024810191013561015e565b34156100bf57600080fd5b61008f610220565b34156100d257600080fd5b61008f60046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965061022695505050505050565b73ffffffffffffffffffffffffffffffffffffffff30163115806101435750670de0b6b3a764000034115b156101545742810160015560008290555b5050565b60015481565b81816040518083838082843782019150509250505060405190819003902060005414801561018d575060015442115b80156101c457503273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b15610154573373ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f19350505050151561015457600080fd5b60005481565b6000816040518082805190602001908083835b602083106102585780518252601f199092019160209182019101610239565b6001836020036101000a0380198251168184511617909252505050919091019250604091505051809103902090509190505600a165627a7a7230582045987b6a0e74c3a5791b1784d8128efce49e089952abe5f4655e9a15e31bcbed0029";
        document.getElementById("bytecode_input").value="166eb4cbc20539e9ebb1a6bba4f700fe77235c52748a4d52078ed425c1d42928a06414e40000000000000000000000000000000000000000000000000000000000000000";
    }else if(selectedOption.value=="RedEnvelope"){
        document.getElementById("solidity_name").value="RedEnvelope";
        document.getElementById("solidity").value="pragma solidity ^0.4.18;\r\n\r\ncontract RedEnvelope {\r\n\r\n    struct EnvelopeType {\r\n        uint256 maxNumber;\r\n        uint256 feeRate;\r\n    }\r\n\r\n    struct Envelope {\r\n        address maker;\r\n        address arbiter;\r\n        uint256 envelopeTypeId;\r\n        uint256 minValue;\r\n        uint256 remainingValue;\r\n        uint256 remainingNumber;\r\n        uint256 willExpireAfter;\r\n        bool random;\r\n        mapping(address => bool) tooks;\r\n    }\r\n\r\n    struct Settings {\r\n        address arbiter;\r\n        uint256 minValue;\r\n    }\r\n\r\n    event Made (\r\n        address indexed maker,\r\n        address indexed arbiter,\r\n        uint256 indexed envelopeId,\r\n        uint256 envelopeTypeId,\r\n        uint256 minValue,\r\n        uint256 total,\r\n        uint256 quantity,\r\n        uint256 willExpireAfter,\r\n        uint256 minedAt,\r\n        uint256 random\r\n    );\r\n\r\n    event Took (\r\n        address indexed taker,\r\n        uint256 indexed envelopeId,\r\n        uint256 value,\r\n        uint256 minedAt\r\n    );\r\n\r\n    event Redeemed(\r\n        address indexed maker,\r\n        uint256 indexed envelopeId,\r\n        uint256 value,\r\n        uint256 minedAt\r\n    );\r\n\r\n    Settings public settings;\r\n    address public owner;\r\n    uint256 public balanceOfEnvelopes;\r\n\r\n    mapping (address => uint256) public envelopeCounts;\r\n    mapping (uint256 => EnvelopeType) public envelopeTypes;\r\n    mapping (uint256 => Envelope) public envelopes;\r\n\r\n    modifier onlyOwner {\r\n        require(owner == msg.sender);\r\n        _;\r\n    }\r\n\r\n    function random() view private returns (uint256) {\r\n        // factor = ceil(2 ^ 256 / 100)\r\n        uint256 factor = 1157920892373161954235709850086879078532699846656405640394575840079131296399;\r\n        bytes32 blockHash = block.blockhash(block.number - 1);\r\n        return uint256(uint256(blockHash) / factor);\r\n    }\r\n\r\n    function RedEnvelope() public {\r\n        settings = Settings(\r\n            msg.sender,\r\n            2000000000000000 // minValue = 0.002 ETH\r\n        );\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function setSettings(address _arbiter, uint256 _minValue) onlyOwner public {\r\n        settings.arbiter = _arbiter;\r\n        settings.minValue = _minValue;\r\n    }\r\n\r\n    function setOwner(address _owner) onlyOwner public {\r\n        owner = _owner;\r\n    }\r\n\r\n    function () payable public {}\r\n\r\n    /*\r\n     * uint256 _envelopeTypeId\r\n     * uint256[2] _data\r\n     *  [0] - maxNumber\r\n     *  [1] - feeRate\r\n     */\r\n    function setEnvelopeType(uint256 _envelopeTypeId, uint256[2] _data) onlyOwner public {\r\n        envelopeTypes[_envelopeTypeId].maxNumber = _data[0];\r\n        envelopeTypes[_envelopeTypeId].feeRate = _data[1];\r\n    }\r\n\r\n    /*\r\n     * uint256 _envelopeId\r\n     * uint256[3] _data\r\n     *  [0] - envelopeTypeId\r\n     *  [1] - quantity;\r\n     *  [2] - willExpireIn;\r\n     *  [3] - random\r\n     */\r\n    function make(uint256 _envelopeId, uint256[4] _data) payable external {\r\n        uint256 count = envelopeCounts[msg.sender] + 1;\r\n        //if (uint256(keccak256(msg.sender, count)) != _envelopeId) {\r\n        //   revert();\r\n        //}\r\n        EnvelopeType memory envelopeType = envelopeTypes[_data[0]];\r\n        //if (envelopeType.maxNumber < _data[1]) {\r\n        //    revert();\r\n        //}\r\n        uint256 total = ( msg.value * 1000 ) / ( envelopeType.feeRate + 1000 );\r\n        if (total / _data[1] < settings.minValue) {\r\n            revert();\r\n        }\r\n        Envelope memory envelope = Envelope(\r\n            msg.sender,                     // maker\r\n            settings.arbiter,               // arbiter\r\n            _data[0],                       // envelopeTypeId\r\n            settings.minValue,              // minValue\r\n            total,                          // remainingValue\r\n            _data[1],                       // remainingNumber\r\n            block.timestamp + _data[2],     // willExpireAfter\r\n            _data[3] > 0                    // random\r\n        );\r\n\r\n        envelopes[_envelopeId] = envelope;\r\n        balanceOfEnvelopes += total;\r\n        envelopeCounts[msg.sender] = count;\r\n\r\n        Made(\r\n            envelope.maker,\r\n            envelope.arbiter,\r\n            _envelopeId,\r\n            envelope.envelopeTypeId,\r\n            envelope.minValue,\r\n            envelope.remainingValue,\r\n            envelope.remainingNumber,\r\n            envelope.willExpireAfter,\r\n            block.timestamp,\r\n            envelope.random ? 1 : 0\r\n        );\r\n    }\r\n\r\n    /*\r\n     * uint256 _envelopeId\r\n     * uint256[4] _data\r\n     *  [0] - willExpireAfter\r\n     *  [1] - v\r\n     *  [2] - r\r\n     *  [3] - s\r\n     */\r\n    function take(uint256 _envelopeId, uint256[4] _data) external {\r\n        \r\n        Envelope storage envelope = envelopes[_envelopeId];\r\n        if (envelope.willExpireAfter < block.timestamp) {\r\n            revert();\r\n        }\r\n        if (envelope.remainingNumber == 0) {\r\n            revert();\r\n        }\r\n        if (envelope.tooks[msg.sender]) {\r\n            revert();\r\n        }\r\n\r\n        if (_data[0] < block.timestamp) {\r\n            revert();\r\n        }\r\n        if (envelope.arbiter != ecrecover(keccak256(_envelopeId, _data[0], msg.sender), uint8(_data[1]), bytes32(_data[2]), bytes32(_data[3]))) {\r\n            revert();\r\n        }\r\n\r\n        uint256 value = 0;\r\n        if (!envelope.random) {\r\n            value = envelope.remainingValue / envelope.remainingNumber;\r\n        } else {\r\n            if (envelope.remainingNumber == 1) {\r\n                value = envelope.remainingValue;\r\n            } else {\r\n                uint256 maxValue = envelope.remainingValue - (envelope.remainingNumber - 1) * envelope.minValue;\r\n                uint256 avgValue = envelope.remainingValue / envelope.remainingNumber * 2;\r\n                value = avgValue < maxValue ? avgValue * random() / 100 : maxValue * random() / 100;\r\n                value = value < envelope.minValue ? envelope.minValue : value;\r\n            }\r\n        }\r\n\r\n        envelope.remainingValue -= value;\r\n        envelope.remainingNumber -= 1;\r\n        envelope.tooks[msg.sender] = true;\r\n        balanceOfEnvelopes -= value;\r\n        msg.sender.transfer(value);\r\n\r\n        Took(\r\n            msg.sender,\r\n            _envelopeId,\r\n            value,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    /*\r\n     * uint256 _envelopeId\r\n     */\r\n    function redeem(uint256 _envelopeId) external {\r\n        Envelope storage envelope = envelopes[_envelopeId];\r\n        if (envelope.willExpireAfter >= block.timestamp) {\r\n            revert();\r\n        }\r\n        if (envelope.remainingValue == 0) {\r\n            revert();\r\n        }\r\n        if (envelope.maker != msg.sender) {\r\n            revert();\r\n        }\r\n\r\n        uint256 value = envelope.remainingValue;\r\n        envelope.remainingValue = 0;\r\n        envelope.remainingNumber = 0;\r\n        balanceOfEnvelopes -= value;\r\n        msg.sender.transfer(value);\r\n\r\n        Redeemed(\r\n            msg.sender,\r\n            _envelopeId,\r\n            value,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function getPaid(uint256 amount) onlyOwner external {\r\n        uint256 maxAmount = this.balance - balanceOfEnvelopes;\r\n        msg.sender.transfer(amount < maxAmount ? amount : maxAmount);\r\n    }\r\n\r\n    function sayGoodBye() onlyOwner external {\r\n        selfdestruct(msg.sender);\r\n    }\r\n}\r\n";
        document.getElementById("solidity_input").value="047f9651c6b6a78cbb8ce0dbb026bb7e4f171b963f489489a49b00e3ee8734fa6b7a1f0d0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000151800000000000000000000000000000000000000000000000000000000000000001";
        document.getElementById("bytecode").value="6080604052600436106100d0576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063047f9651146100d257806305533ce1146100fc57806313af40351461014957806319c4e40f1461018c5780631df95786146101d457806320dd60f5146102a257806324b3940a146102fe5780632a92362c146103155780638da5cb5b146103425780639cc8456414610399578063af1b7d90146103f0578063b6e119ab14610427578063db006a7514610452578063e06174e41461047f575b005b6100fa60048036038101908080359060200190929190806080019091929192905050506104dd565b005b34801561010857600080fd5b50610147600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506108c6565b005b34801561015557600080fd5b5061018a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610973565b005b34801561019857600080fd5b506101b760048036038101908080359060200190929190505050610a13565b604051808381526020018281526020019250505060405180910390f35b3480156101e057600080fd5b506101ff60048036038101908080359060200190929190505050610a37565b604051808973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001878152602001868152602001858152602001848152602001838152602001821515151581526020019850505050505050505060405180910390f35b3480156102ae57600080fd5b506102fc600480360381019080803590602001909291908060400190600280602002604051908101604052809291908260026020028082843782019150505050509192919290505050610acc565b005b34801561030a57600080fd5b50610313610b88565b005b34801561032157600080fd5b5061034060048036038101908080359060200190929190505050610bfd565b005b34801561034e57600080fd5b50610357610cd2565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156103a557600080fd5b506103da600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610cf8565b6040518082815260200191505060405180910390f35b3480156103fc57600080fd5b506104256004803603810190808035906020019092919080608001909192919290505050610d10565b005b34801561043357600080fd5b5061043c611161565b6040518082815260200191505060405180910390f35b34801561045e57600080fd5b5061047d60048036038101908080359060200190929190505050611167565b005b34801561048b57600080fd5b506104946112cf565b604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390f35b60006104e7611347565b60006104f1611361565b6001600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540193506005600086600060048110151561054957fe5b602002013581526020019081526020016000206040805190810160405290816000820154815260200160018201548152505092506103e88360200151016103e8340281151561059457fe5b0491506000600101548560016004811015156105ac57fe5b6020020135838115156105bb57fe5b0410156105c757600080fd5b610100604051908101604052803373ffffffffffffffffffffffffffffffffffffffff1681526020016000800160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200186600060048110151561063f57fe5b60200201358152602001600060010154815260200183815260200186600160048110151561066957fe5b6020020135815260200186600260048110151561068257fe5b602002013542018152602001600087600360048110151561069f57fe5b60200201351115158152509050806006600088815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e08201518160070160006101000a81548160ff0219169083151502179055509050508160036000828254019250508190555083600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555085816020015173ffffffffffffffffffffffffffffffffffffffff16826000015173ffffffffffffffffffffffffffffffffffffffff167ff405311b6fafcddac4bba35f075777c8f36fe27c95b926daca96063cb489e0a48460400151856060015186608001518760a001518860c00151428a60e0015161087957600061087c565b60015b604051808881526020018781526020018681526020018581526020018481526020018381526020018260ff16815260200197505050505050505060405180910390a4505050505050565b3373ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561092257600080fd5b816000800160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806000600101819055505050565b3373ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156109cf57600080fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60056020528060005260406000206000915090508060000154908060010154905082565b60066020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154908060030154908060040154908060050154908060060154908060070160009054906101000a900460ff16905088565b3373ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515610b2857600080fd5b806000600281101515610b3757fe5b60200201516005600084815260200190815260200160002060000181905550806001600281101515610b6557fe5b602002015160056000848152602001908152602001600020600101819055505050565b3373ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515610be457600080fd5b3373ffffffffffffffffffffffffffffffffffffffff16ff5b60003373ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515610c5b57600080fd5b6003543073ffffffffffffffffffffffffffffffffffffffff16310390503373ffffffffffffffffffffffffffffffffffffffff166108fc828410610ca05782610ca2565b835b9081150290604051600060405180830381858888f19350505050158015610ccd573d6000803e3d6000fd5b505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60046020528060005260406000206000915090505481565b6000806000806006600087815260200190815260200160002093504284600601541015610d3c57600080fd5b600084600501541415610d4e57600080fd5b8360080160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615610da757600080fd5b42856000600481101515610db757fe5b60200201351015610dc757600080fd5b600186866000600481101515610dd957fe5b602002013533604051808481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c0100000000000000000000000002815260140193505050506040518091039020866001600481101515610e4c57fe5b6020020135876002600481101515610e6057fe5b6020020135600102886003600481101515610e7757fe5b6020020135600102604051600081526020016040526040518085600019166000191681526020018460ff1660ff1681526020018360001916600019168152602001826000191660001916815260200194505050505060206040516020810390808403906000865af1158015610ef0573d6000803e3d6000fd5b5050506020604051035173ffffffffffffffffffffffffffffffffffffffff168460010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515610f5757600080fd5b600092508360070160009054906101000a900460ff161515610f8e5783600501548460040154811515610f8657fe5b04925061102c565b600184600501541415610fa7578360040154925061102b565b83600301546001856005015403028460040154039150600284600501548560040154811515610fd257fe5b04029050818110610ff8576064610fe7611301565b8302811515610ff257fe5b0461100f565b6064611002611301565b820281151561100d57fe5b045b9250836003015483106110225782611028565b83600301545b92505b5b8284600401600082825403925050819055506001846005016000828254039250508190555060018460080160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550826003600082825403925050819055503373ffffffffffffffffffffffffffffffffffffffff166108fc849081150290604051600060405180830381858888f19350505050158015611101573d6000803e3d6000fd5b50853373ffffffffffffffffffffffffffffffffffffffff167f17ea4a790af91bc6f52be9f638ae7218c4a7b159b9cd1780b1198b6d39a1174b8542604051808381526020018281526020019250505060405180910390a3505050505050565b60035481565b60008060066000848152602001908152602001600020915042826006015410151561119157600080fd5b6000826004015414156111a357600080fd5b3373ffffffffffffffffffffffffffffffffffffffff168260000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561120157600080fd5b816004015490506000826004018190555060008260050181905550806003600082825403925050819055503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015611272573d6000803e3d6000fd5b50823373ffffffffffffffffffffffffffffffffffffffff167f484c40561359f3e3b8be9101897f8680aa82fbe1df9fd9038e0dbc62840326468342604051808381526020018281526020019250505060405180910390a3505050565b60008060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154905082565b60008060007f028f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f5c28f91506001430340905081816001900481151561133f57fe5b049250505090565b604080519081016040528060008152602001600081525090565b61010060405190810160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000815260200160008152602001600081526020016000815260200160001515815250905600a165627a7a723058204ab32e0db184d680ef433165e2d62256947e6d41c66a7a6b5ff427ebb828ff4b0029";
        document.getElementById("bytecode_input").value="047f9651c6b6a78cbb8ce0dbb026bb7e4f171b963f489489a49b00e3ee8734fa6b7a1f0d0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000151800000000000000000000000000000000000000000000000000000000000000001";
    }else if(selectedOption.value=="SimpleLotto"){
        document.getElementById("solidity_name").value="SimpleLotto";
        document.getElementById("solidity").value="contract SimpleLotto {\r\n    int public playCount = 0;\r\n    address public owner = msg.sender;\r\n    mapping (address => uint) public players;\r\n    Aggregate public aggregate;\r\n\r\n  struct Aggregate {\r\n    uint msgValue;\r\n    uint gas;\r\n  }\r\n\r\n    modifier onlyBy(address _account) {\r\n        if (msg.sender != _account)\r\n            throw;\r\n        _;\r\n    }\r\n    \r\n    function SimpleLotto() {\r\n        playCount = 42;\r\n    }\r\n    \r\n    event Sent(address from, address to, int amount);\r\n    \r\n    function play(address receiver, uint amount) returns (uint){\r\n        playCount++;\r\n        Sent(owner, receiver, playCount);\r\n        players[receiver] += amount;\r\n        \r\n        aggregate.msgValue = msg.value;\r\n        aggregate.gas = msg.gas;\r\n        \r\n        return msg.value;\r\n    } \r\n\r\n    function terminate() { \r\n        if (msg.sender == owner)\r\n            suicide(owner); \r\n    }\r\n    \r\n    function terminateAlt() onlyBy(owner) { \r\n            suicide(owner); \r\n    }\r\n}";
        document.getElementById("solidity_input").value="f0e10c0d000000000000000000000000466f39a5fd8d1bd54ea7e82975177c0f00c684920000000000000000000000000000000000000000000000000000000000000017";
        document.getElementById("bytecode").value="606060405236156100615760e060020a60003504630c08bf8881146100635780634dc7cc551461008b5780638da5cb5b146100aa57806397614302146100bc578063af36778b146100c5578063e2eb41ff146100d1578063f0e10c0d146100e9575b005b61006160015433600160a060020a039081169116141561018257600154600160a060020a0316ff5b610061600154600160a060020a03908116903316811461018457610002565b61016b600154600160a060020a031681565b61016b60005481565b61017560035460045482565b61016b60043560026020526000908152604090205481565b61016b6004356024356000805460019081018083559054600160a060020a03908116606090815290851660805260a0919091527fe15f3ec2d09b6be701ef18caa7d2cc148b42433d71565dc74a9cf475abd339779080a1600160a060020a0383168152600260205260408120805483019055346003555a600455503492915050565b6060908152602090f35b6060918252608052604090f35b565b80ff";
        document.getElementById("bytecode_input").value="f0e10c0d000000000000000000000000466f39a5fd8d1bd54ea7e82975177c0f00c684920000000000000000000000000000000000000000000000000000000000000017";
    }else if(selectedOption.value=="HBToken"){
        document.getElementById("solidity_name").value="HBToken";
        document.getElementById("solidity").value="//pragma solidity 0.4.19;\r\n\r\ncontract Token {\r\n\r\n    /// @return total amount of tokens\r\n    function totalSupply() constant returns (uint supply) {}\r\n\r\n    /// @param _owner The address from which the balance will be retrieved\r\n    /// @return The balance\r\n    function balanceOf(address _owner) constant returns (uint balance) {}\r\n\r\n    /// @notice send `_value` token to `_to` from `msg.sender`\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transfer(address _to, uint _value) returns (bool success) {}\r\n\r\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\r\n    /// @param _from The address of the sender\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transferFrom(address _from, address _to, uint _value) returns (bool success) {}\r\n\r\n    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @param _value The amount of wei to be approved for transfer\r\n    /// @return Whether the approval was successful or not\r\n    function approve(address _spender, uint _value) returns (bool success) {}\r\n\r\n    /// @param _owner The address of the account owning tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @return Amount of remaining tokens allowed to spent\r\n    function allowance(address _owner, address _spender) constant returns (uint remaining) {}\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\ncontract RegularToken is Token {\r\n\r\n    function transfer(address _to, uint _value) returns (bool) {\r\n        //Default assumes totalSupply can't be over max (2^256 - 1).\r\n        if (balances[msg.sender] >= _value && balances[_to] + _value >= balances[_to]) {\r\n            balances[msg.sender] -= _value;\r\n            balances[_to] += _value;\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        } else { return false; }\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint _value) returns (bool) {\r\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value >= balances[_to]) {\r\n            balances[_to] += _value;\r\n            balances[_from] -= _value;\r\n            allowed[_from][msg.sender] -= _value;\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        } else { return false; }\r\n    }\r\n\r\n    function balanceOf(address _owner) constant returns (uint) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint _value) returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant returns (uint) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    mapping (address => uint) balances;\r\n    mapping (address => mapping (address => uint)) allowed;\r\n    uint public totalSupply;\r\n}\r\n\r\ncontract UnboundedRegularToken is RegularToken {\r\n\r\n    uint constant MAX_UINT = 2**256 - 1;\r\n    \r\n    /// @dev ERC20 transferFrom, modified such that an allowance of MAX_UINT represents an unlimited amount.\r\n    /// @param _from Address to transfer from.\r\n    /// @param _to Address to transfer to.\r\n    /// @param _value Amount to transfer.\r\n    /// @return Success of transfer.\r\n    function transferFrom(address _from, address _to, uint _value)\r\n        public\r\n        returns (bool)\r\n    {\r\n        uint allowance = allowed[_from][msg.sender];\r\n        if (balances[_from] >= _value\r\n            && allowance >= _value\r\n            && balances[_to] + _value >= balances[_to]\r\n        ) {\r\n            balances[_to] += _value;\r\n            balances[_from] -= _value;\r\n            if (allowance < MAX_UINT) {\r\n                allowed[_from][msg.sender] -= _value;\r\n            }\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n\r\ncontract HBToken is UnboundedRegularToken {\r\n\r\n    uint public totalSupply = 5*10**26;\r\n    uint8 constant public decimals = 18;\r\n    string constant public name = \"HuobiToken\";\r\n    string constant public symbol = \"HT\";\r\n\r\n    function HBToken() {\r\n        balances[msg.sender] = totalSupply;\r\n        Transfer(address(0), msg.sender, totalSupply);\r\n    }\r\n}";
        document.getElementById("solidity_input").value="a9059cbb00000000000000000000000054244e76fcf5c91ef149c5e6bfd0ebcc257cca100000000000000000000000000000000000000000000000000000000000000000";
        document.getElementById("bytecode").value="6060604052600436106100985763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde03811461009d578063095ea7b31461012757806318160ddd1461015d57806323b872dd14610182578063313ce567146101aa57806370a08231146101d357806395d89b41146101f2578063a9059cbb14610205578063dd62ed3e14610227575b600080fd5b34156100a857600080fd5b6100b061024c565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156100ec5780820151838201526020016100d4565b50505050905090810190601f1680156101195780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561013257600080fd5b610149600160a060020a0360043516602435610283565b604051901515815260200160405180910390f35b341561016857600080fd5b6101706102f0565b60405190815260200160405180910390f35b341561018d57600080fd5b610149600160a060020a03600435811690602435166044356102f6565b34156101b557600080fd5b6101bd610426565b60405160ff909116815260200160405180910390f35b34156101de57600080fd5b610170600160a060020a036004351661042b565b34156101fd57600080fd5b6100b0610446565b341561021057600080fd5b610149600160a060020a036004351660243561047d565b341561023257600080fd5b610170600160a060020a036004358116906024351661053a565b60408051908101604052600a81527f48756f6269546f6b656e00000000000000000000000000000000000000000000602082015281565b600160a060020a03338116600081815260016020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a35060015b92915050565b60035481565b600160a060020a03808416600081815260016020908152604080832033909516835293815283822054928252819052918220548390108015906103395750828110155b801561035f5750600160a060020a03841660009081526020819052604090205483810110155b1561041957600160a060020a03808516600090815260208190526040808220805487019055918716815220805484900390556000198110156103c957600160a060020a03808616600090815260016020908152604080832033909416835292905220805484900390555b83600160a060020a031685600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8560405190815260200160405180910390a36001915061041e565b600091505b509392505050565b601281565b600160a060020a031660009081526020819052604090205490565b60408051908101604052600281527f4854000000000000000000000000000000000000000000000000000000000000602082015281565b600160a060020a0333166000908152602081905260408120548290108015906104c05750600160a060020a03831660009081526020819052604090205482810110155b1561053257600160a060020a033381166000818152602081905260408082208054879003905592861680825290839020805486019055917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060016102ea565b5060006102ea565b600160a060020a039182166000908152600160209081526040808320939094168252919091522054905600a165627a7a72305820c129bd269d0adfb45f74a1d569e7170c49140570d880849318201de68509f99d0029";
        document.getElementById("bytecode_input").value="a9059cbb00000000000000000000000054244e76fcf5c91ef149c5e6bfd0ebcc257cca100000000000000000000000000000000000000000000000000000000000000000";
    }else if(selectedOption.value=="Rating"){
        document.getElementById("solidity_name").value="Rating";
        document.getElementById("solidity").value="contract Rating {\r\n        function setRating(bytes32 _key, uint256 _value) {\r\n            ratings[_key] = _value;\r\n        }\r\n        mapping (bytes32 => uint256) public ratings;\r\n    }";
        document.getElementById("solidity_input").value="50b7b7a2546974616e6963000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008";
        document.getElementById("bytecode").value="60606040526000357c01000000000000000000000000000000000000000000000000000000009004806350b7b7a21460415780636c71d01d14606057603f565b005b605e6004808035906020019091908035906020019091905050608a565b005b6074600480803590602001909190505060ad565b6040518082815260200191505060405180910390f35b8060006000506000848152602001908152602001600020600050819055505b5050565b6000600050602052806000526040600020600091509050548156";
        document.getElementById("bytecode_input").value="50b7b7a2546974616e6963000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008";
    }else if(selectedOption.value=="DANKSIGNALS"){
        document.getElementById("solidity_name").value="DANKSIGNALS";
        document.getElementById("solidity").value="pragma solidity ^0.4.16;\r\n\r\ncontract Token {\r\n\r\n    /// @return total amount of tokens\r\n    function totalSupply() constant returns (uint256 supply) {}\r\n\r\n    /// @param _owner The address from which the balance will be retrieved\r\n    /// @return The balance\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {}\r\n\r\n    /// @notice send `_value` token to `_to` from `msg.sender`\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transfer(address _to, uint256 _value) returns (bool success) {}\r\n\r\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\r\n    /// @param _from The address of the sender\r\n    /// @param _to The address of the recipient\r\n    /// @param _value The amount of token to be transferred\r\n    /// @return Whether the transfer was successful or not\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\r\n\r\n    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @param _value The amount of wei to be approved for transfer\r\n    /// @return Whether the approval was successful or not\r\n    function approve(address _spender, uint256 _value) returns (bool success) {}\r\n\r\n    /// @param _owner The address of the account owning tokens\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @return Amount of remaining tokens allowed to spent\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    \r\n}\r\n\r\n\r\n\r\ncontract StandardToken is Token {\r\n\r\n    function transfer(address _to, uint256 _value) returns (bool success) {\r\n        //Default assumes totalSupply can't be over max (2^256 - 1).\r\n        //If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn't wrap.\r\n        //Replace the if with this one instead.\r\n        //if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n        if (balances[msg.sender] >= _value && _value > 0) {\r\n            balances[msg.sender] -= _value;\r\n            balances[_to] += _value;\r\n            Transfer(msg.sender, _to, _value);\r\n            return true;\r\n        } else { return false; }\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n        //same as above. Replace this line with the following if you want to protect against wrapping uints.\r\n        //if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\r\n            balances[_to] += _value;\r\n            balances[_from] -= _value;\r\n            allowed[_from][msg.sender] -= _value;\r\n            Transfer(_from, _to, _value);\r\n            return true;\r\n        } else { return false; }\r\n    }\r\n\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n      return allowed[_owner][_spender];\r\n    }\r\n\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n    uint256 public totalSupply;\r\n}\r\n\r\n\r\ncontract DANKSIGNALS is StandardToken {\r\n\r\n    function () {\r\n        throw;\r\n    }\r\n\r\n    /* Public variables of the token */\r\n\r\n    string public name;                   \r\n    uint8 public decimals;                \r\n    string public symbol;                 \r\n    string public version = 'H1.0';    \r\n\r\n\r\n    function DANKSIGNALS(\r\n        ) {\r\n        balances[msg.sender] = 25000000000000000000000000000;\r\n        totalSupply = 25000000000000000000000000000;\r\n        name = \"Dank Signals\";\r\n        decimals = 18;\r\n        symbol = \"DANK\";\r\n    }\r\n\r\n    /* Approves and then calls the receiving contract */\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n\r\n        //call the receiveApproval function on the contract you want to be notified. This crafts the function signature manually so one doesn't have to include a contract in here just for this.\r\n        //receiveApproval(address _from, uint256 _value, address _tokenContract, bytes _extraData)\r\n        //it is assumed that when does this that the call *should* succeed, otherwise one would use vanilla approve instead.\r\n        if(!_spender.call(bytes4(bytes32(sha3(\"receiveApproval(address,uint256,address,bytes)\"))), msg.sender, _value, this, _extraData)) { throw; }\r\n        return true;\r\n    }\r\n}";
        document.getElementById("solidity_input").value="a9059cbb000000000000000000000000c4bca4fb49064191ecbeff27359c07f92cd86c01000000000000000000000000000000000000000050c783eb9b5c85f2a8000000";
        document.getElementById("bytecode").value="";
        document.getElementById("bytecode_input").value="a9059cbb000000000000000000000000c4bca4fb49064191ecbeff27359c07f92cd86c01000000000000000000000000000000000000000050c783eb9b5c85f2a8000000";
    }
}
